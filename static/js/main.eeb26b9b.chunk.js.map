{"version":3,"sources":["components/NavBar.js","containers/AddGroup.js","actions/index.js","components/Group.js","components/GroupList.js","selectors/index.js","containers/GroupList.js","components/GroupPage.js","containers/AddRound.js","components/Round.js","components/RoundList.js","containers/RoundList.js","components/RoundsPage.js","containers/AddScore.js","components/Score.js","components/RoundScoreList.js","containers/RoundScoreList.js","components/RoundScorePage.js","containers/RoundScorePage.js","components/FinalScore.js","components/FullScoreList.js","components/FullScorePage.js","containers/FullScorePage.js","components/IntermediateScorePage.js","components/FinalScorePage.js","App.js","reducers/stateUpdates.js","reducers/groups.js","reducers/rounds.js","reducers/scores.js","reducers/index.js","serviceWorker.js","localStorage.js","index.js"],"names":["NavBar","Navbar","bg","variant","fixed","expand","Brand","Nav","className","to","Link","AddGroup","props","state","number","name","dispatch","handleInputChange","bind","handleSubmit","event","target","value","this","setState","preventDefault","trim","nameInput","focus","parseInt","isNaN","type","addGroup","numberInput","Form","onSubmit","Row","Col","Control","placeholder","ref","input","onChange","Button","React","Component","connect","Group","joker","totalScore","GroupList","groups","Table","striped","bordered","hover","map","group","index","key","groupsSelector","roundsSelector","rounds","scoresSelector","scores","scoresPropsSelector","_","propsRoundSelector","round","roundnameSelector","filter","match","params","getFinalScores","createSelector","includeJoker","console","log","sortedRounds","orderBy","roundNames","finalScores","roundScores","roundScore","find","score","points","reduce","total","groupName","ranking","getAnnotatedGroups","jokerScore","jokerRound","undefined","getGroupNumbers","getSortedGroups","getSortedRounds","getGroupsThatUsedJoker","GroupListContainer","GroupPage","Fragment","AddRound","maxPoints","jokerAllowed","checked","addRound","maxInput","Check","label","Round","RoundList","RoundListContainer","RoundPage","AddScore","showError","errorText","handleClose","pointsInput","groupsThatUsedJoker","includes","findIndex","groupNumbers","item","groupInput","addScore","nextGroup","toString","Modal","show","animation","Header","closeButton","Title","Body","Footer","varian","onClick","Score","RoundScoreList","RoundScoreListContainer","getSortedRoundScores","RoundScorePage","RoundScorePageContainer","getRound","FinalScore","blank","finalScore","FullScoreList","numPages","Math","ceil","length","handleKeyDown","allScores","page","lastPageStep","scoresToShow","showPage","window","addEventListener","removeEventListener","pageNumber","prevState","start","end","slice","e","keyCode","FullScorePage","FullScorePageContainer","IntermediateScorePage","FinalScorePage","App","Container","path","RoundsPage","component","addOrUpdateName","existingItemFound","newState","push","addOrUpdateNameRounds","addOrUpdateScore","action","combineReducers","Boolean","location","hostname","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","scoreboardApp","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eeb26b9b.chunk.js","sourcesContent":["import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav'\nimport { LinkContainer } from 'react-router-bootstrap'\n\n\nconst NavBar = () => (\n    <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\" expand=\"lg\">\n        <Navbar.Brand>Scoreboard</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/groups\"><Nav.Link>Ploegen</Nav.Link></LinkContainer>\n            <LinkContainer to=\"/rounds\"><Nav.Link>Reeksen</Nav.Link></LinkContainer>\n            <LinkContainer to=\"/intermediatescore\"><Nav.Link>Tussenstand</Nav.Link></LinkContainer>\n            <LinkContainer to=\"/finalscore\"><Nav.Link>Eindstand</Nav.Link></LinkContainer>\n        </Nav>\n    </Navbar>\n)\n\nexport default NavBar\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addGroup } from '../actions'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\nclass AddGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            number: \"\",\n            name: \"\"\n        }\n\n        this.dispatch = props.dispatch\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (!this.state.name.trim()) {\n            this.nameInput.focus();\n        }\n        if (!this.state.number.trim() || !this.state.name.trim()) {\n            return\n        }\n        const number = parseInt(this.state.number, 10)\n        if (!isNaN(number))\n            this.dispatch(addGroup(number, this.state.name))\n\n        this.setState({\n            number: \"\",\n            name: \"\"\n        })\n        this.numberInput.focus();\n    }\n\n    render() {\n        return (\n            <Form className=\"p-4\" onSubmit={this.handleSubmit}>\n                <Form.Row>\n                    <Col className=\"col-md-2\">\n                        <Form.Control name=\"number\" placeholder=\"Tafelnummer\" ref={(input) => {this.numberInput = input; }} value={this.state.number} onChange={this.handleInputChange} />\n                    </Col>\n                    <Col>\n                        <Form.Control name=\"name\" placeholder=\"Ploegsnaam\" ref={(input) => {this.nameInput = input; }} value={this.state.name} onChange={this.handleInputChange} />\n                    </Col>\n                    <Button type=\"submit\">Ploeg toevoegen</Button>\n                </Form.Row>\n            </Form>\n        )\n    }\n}\n\nexport default connect()(AddGroup)\n","export const addGroup = (number, name) => ({\n    type: 'ADD_GROUP',\n    number: number,\n    name: name\n})\n\nexport const addRound = (number, name, maxPoints, jokerAllowed) => ({\n    type: 'ADD_ROUND',\n    number: number,\n    name: name,\n    maxPoints: maxPoints,\n    jokerAllowed: jokerAllowed\n})\n\nexport const addScore = (round, group, points, joker) => ({\n    type: 'ADD_SCORE',\n    round: round,\n    group: group,\n    points: points,\n    joker: joker\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Group = ({number, name, joker, totalScore}) => (\n    <tr>\n        <td>{number}</td>\n        <td>{name}</td>\n        <td>{joker}</td>\n        <td>{totalScore}</td>\n    </tr>\n)\n\nGroup.propTypes = {\n   number: PropTypes.number.isRequired,\n   name: PropTypes.string.isRequired\n}\n\nexport default Group\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Group from './Group'\nimport Table from 'react-bootstrap/Table'\n\nconst GroupList = ({groups}) => (\n    <Table striped bordered hover>\n        <thead>\n            <tr>\n                <th>Tafel</th>\n                <th>Ploegsnaam</th>\n                <th>Joker</th>\n                <th>Totaal score</th>\n            </tr>\n        </thead>\n        <tbody>\n            {groups.map((group, index) => (\n                <Group key={group.number} number={group.number} name={group.name} joker={group.joker} totalScore={group.totalScore} />\n            ))}\n        </tbody>\n    </Table>\n)\n\nGroupList.propTypes = {\n   groups: PropTypes.arrayOf(\n        PropTypes.shape({\n            number: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired\n        }).isRequired\n   ).isRequired\n}\n\nexport default GroupList\n","import { createSelector } from 'reselect'\nimport orderBy from 'lodash/orderBy'\nimport find from 'lodash/find'\n\nconst groupsSelector = state => state.groups\nconst roundsSelector = state => state.rounds\nconst scoresSelector = state => state.scores\n\nconst groupsPropsSelector = (state, _) => state.groups\nconst roundsPropsSelector = (state, _) => state.rounds\nconst scoresPropsSelector = (state, _) => state.scores\n\nconst propsRoundSelector = (_, props) => props.round\nconst propsJokerShownSelector = (_, props) => props.includeJoker\n\nconst roundnameSelector = (state, props) => {\n    return state.rounds.filter(round => round.number === parseInt(props.match.params.round))\n}\n\nexport const getFinalScores = createSelector(\n    groupsPropsSelector,\n    roundsPropsSelector,\n    scoresPropsSelector,\n    propsJokerShownSelector,\n    (groups, rounds, scores, includeJoker) => {\n        console.log(\"includeJoker = \" + includeJoker)\n        const sortedRounds = orderBy(rounds, ['number'], ['asc'])\n        const roundNames = sortedRounds.map(round => round.name)\n        const finalScores = groups.map((group, index) => {\n            const roundScores = sortedRounds.map(round => {\n                const roundScore = find(scores, score => score.round === round.number && score.group === group.number)\n                if (roundScore) {\n                    return includeJoker ? roundScore: {...roundScore, joker: false}\n                } else {\n                    return {points: 0, joker: false}\n                }\n            })\n            const totalScore = scores.filter(score => score.group === group.number)\n                .reduce((total, score) => {\n                        return score.joker && includeJoker? total + score.points * 2 : total + score.points\n                }, 0)\n            return {\n                groupName: group.name,\n                roundScores: roundScores,\n                totalScore: totalScore\n            }\n        })\n        return {\n            rounds: roundNames,\n            scores: orderBy(finalScores, ['totalScore'], ['desc'])\n                .map((score, index) => ({...score, ranking: index + 1}))\n        }\n    }\n)\n\nconst getAnnotatedGroups = createSelector(\n    groupsSelector,\n    roundsSelector,\n    scoresSelector,\n    (groups, rounds, scores) => {\n        console.log(\"getAnnotatedGroups selector is recalculating\")\n        return groups.map((group, index) => {\n            const jokerScore = find(scores, (score) => {\n                return score.joker && score.group === group.number\n            }) \n            var jokerRound = undefined\n            if (jokerScore) {\n                const round = find(rounds, (round) => round.number === jokerScore.round)\n                jokerRound = round.name\n            }\n            const totalScore = scores.filter(score => score.group === group.number)\n                .reduce((total, score) => {\n                        return score.joker? total + score.points * 2 : total + score.points\n                }, 0)\n            return {\n                ...group,\n                joker: jokerRound? jokerRound : \"-\",\n                totalScore: totalScore\n            }\n        })\n    }\n)\n\nexport const getGroupNumbers = createSelector(\n    groupsSelector,\n    (groups) => {\n        console.log(\"GetGroupNumbers selector is recalculating\")\n        return groups.map((group, index) => group.number)\n    }\n)\n\nexport const getSortedGroups = createSelector(\n    getAnnotatedGroups,\n    (groups) => {\n        return orderBy(\n            groups,\n            ['number'],\n            ['asc']\n        )\n    }\n)\n\nexport const getSortedRounds = createSelector(\n    roundsSelector,\n    (rounds) => {\n        return orderBy(\n            rounds,\n            ['number'],\n            ['asc']\n        )\n    }\n)\n\nexport const makeGetSortedRoundScores = () => {\n    return createSelector(\n        scoresPropsSelector,\n        groupsSelector,\n        propsRoundSelector,\n        (scores, groups, round) => {\n            console.log(round)\n            console.log(\"getSortedRoundScores selector is recalculating\")\n            return orderBy(\n                scores.filter(score => score.round === round)\n                .map((score, index) => {\n                    const group = groups.find(group => group.number === score.group)\n                    return {\n                        ...score,\n                        groupName: group.name\n                    }\n                }),\n                ['group'],\n                ['asc']\n            )\n        }\n    )\n}\n\nexport const makeGetRound = () => {\n    return createSelector(\n        roundnameSelector,\n        (round) => {\n            return round[0]\n        }\n    )\n}\n\nexport const getGroupsThatUsedJoker = createSelector(\n    scoresSelector,\n    (scores) => {\n        return scores.filter(score => score.joker)\n            .map((score, index) => score.group)\n    }\n)","import { connect } from 'react-redux'\nimport GroupList from '../components/GroupList'\n\nimport { getSortedGroups } from '../selectors'\n\nconst mapStateToProps = state => {\n  return {\n    groups: getSortedGroups(state)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  }\n}\n\nconst GroupListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GroupList)\n\nexport default GroupListContainer\n","import React from 'react'\nimport AddGroup from '../containers/AddGroup'\nimport GroupList from '../containers/GroupList'\n\nconst GroupPage = () => (\n    <React.Fragment>\n        <AddGroup />\n        <GroupList /> \n    </React.Fragment>\n)\n\n\nexport default GroupPage\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addRound } from '../actions'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\nclass AddRound extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            number: \"\",\n            name: \"\",\n            maxPoints: \"\",\n            jokerAllowed: false\n        }\n\n        this.dispatch = props.dispatch\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (!this.state.name.trim()) {\n            this.nameInput.focus();\n        }\n        if (!this.state.number.trim() || !this.state.name.trim() || !this.state.maxPoints.trim()) {\n            return\n        }\n        const number = parseInt(this.state.number, 10)\n        const maxPoints = parseInt(this.state.maxPoints, 10)\n        if (!isNaN(number))\n            this.dispatch(addRound(number, this.state.name, maxPoints, this.state.jokerAllowed))\n\n        this.setState({\n            number: \"\",\n            name: \"\",\n            maxPoints: \"\",\n            jokerAllowed: false\n        })\n        this.numberInput.focus();\n    }\n\n    render() {\n        return (\n            <Form className=\"p-4\" onSubmit={this.handleSubmit}>\n                <Form.Row>\n                    <Col className=\"col-md-2\">\n                        <Form.Control name=\"number\" placeholder=\"Reeksnummer\" ref={(input) => {this.numberInput = input; }} value={this.state.number} onChange={this.handleInputChange} />\n                    </Col>\n                    <Col>\n                        <Form.Control name=\"name\" placeholder=\"Reeksnaam\" ref={(input) => {this.nameInput = input; }} value={this.state.name} onChange={this.handleInputChange} />\n                    </Col>\n                    <Col>\n                        <Form.Control name=\"maxPoints\" placeholder=\"Maximum score\" ref={(input) => {this.maxInput = input; }} value={this.state.maxPoints} onChange={this.handleInputChange} />\n                    </Col>\n                    <Col>\n                        <Form.Check label=\"Joker toegestaan\" name=\"jokerAllowed\" checked={this.state.jokerAllowed} onChange={this.handleInputChange} />\n                    </Col>\n                    <Button type=\"submit\">Reeks toevoegen</Button>\n                </Form.Row>\n            </Form>\n        )\n    }\n}\n\nexport default connect()(AddRound)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nconst Round = ({number, name, maxPoints, jokerAllowed}) => (\n    <tr>\n        <td>{number}</td>\n        <td>{name}</td>\n        <td>{maxPoints}</td>\n        <td>{jokerAllowed ? \"Ja\" : \"Nee\"}</td>\n        <td><Link to={\"/roundscore/\" + number }>Punten ingeven</Link></td>\n    </tr>\n)\n\nRound.propTypes = {\n   number: PropTypes.number.isRequired,\n   name: PropTypes.string.isRequired\n}\n\nexport default Round","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Round from './Round'\nimport Table from 'react-bootstrap/Table'\n\nconst RoundList = ({rounds}) => (\n    <Table striped bordered hover>\n        <thead>\n            <tr>\n                <th>#</th>\n                <th>Reeksnaam</th>\n                <th>Maximum score</th>\n                <th>Joker toegestaan</th>\n                <th></th>\n            </tr>\n        </thead>\n        <tbody>\n            {rounds.map((round, index) => (\n                <Round key={round.number} number={round.number} name={round.name} maxPoints={round.maxPoints} jokerAllowed={round.jokerAllowed} />\n            ))}\n        </tbody>\n    </Table>\n)\n\nRoundList.propTypes = {\n   rounds: PropTypes.arrayOf(\n        PropTypes.shape({\n            number: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired\n        }).isRequired\n   ).isRequired\n}\n\nexport default RoundList\n","import { connect } from 'react-redux'\nimport RoundList from '../components/RoundList'\nimport { getSortedRounds } from '../selectors'\n\nconst mapStateToProps = state => {\n  return {\n    rounds: getSortedRounds(state)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  }\n}\n\nconst RoundListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RoundList)\n\nexport default RoundListContainer\n","import React from 'react'\nimport AddRound from '../containers/AddRound'\nimport RoundList from '../containers/RoundList'\n\nconst RoundPage = () => (\n    <React.Fragment>\n        <AddRound />\n        <RoundList /> \n    </React.Fragment>\n)\n\n\nexport default RoundPage\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addScore } from '../actions'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport { getGroupNumbers, getGroupsThatUsedJoker } from '../selectors'\nimport findIndex from 'lodash/findIndex'\nimport Modal from 'react-bootstrap/Modal'\n\nclass AddScore extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            group: \"\",\n            points: \"\",\n            showError: false,\n            errorText: \"\"\n        }\n        this.round = props.round\n\n        this.dispatch = props.dispatch\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleClose(event) {\n        this.setState({\n            showError: false,\n            errorText: \"\"\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (!this.state.points.trim()) {\n            this.pointsInput.focus();\n        }\n        if (!this.state.group.trim() || !this.state.points.trim()) {\n            return\n        }\n        // Round constraints\n        const jokerAllowed = this.round.jokerAllowed\n        const maxPoints = this.round.maxPoints\n        const groupsThatUsedJoker = this.props.groupsThatUsedJoker\n\n        // Form inputs\n        const group = parseInt(this.state.group, 10)\n        const points = parseInt(this.state.points, 10)\n        const joker = this.state.points.includes('+')\n\n        if (!isNaN(group) && !isNaN(points)) {\n            // Check if group number exists\n            if (findIndex(this.props.groupNumbers, (item) => item === group) === -1) {\n                console.log(\"Group number not found\")\n                this.groupInput.focus()\n                this.setState({\n                    showError: true,\n                    errorText: \"Het opgegeven tafelnummer bestaat niet.\"\n                })\n                return\n            } else if (points > maxPoints) {\n                this.setState({\n                    showError: true,\n                    errorText: \"De ingegeven score is meer dan het maximum in deze ronde.\"\n                })\n                return\n            } else if (joker && !jokerAllowed) {\n                this.setState({\n                    showError: true,\n                    errorText: \"De joker kan niet gebruikt worden in deze ronde.\"\n                })\n                return\n            } else if (joker && findIndex(groupsThatUsedJoker, (item) => item === group) !== -1) {\n                console.log(\"Group has already used joker\")\n                this.pointsInput.focus()\n                this.setState({\n                    showError: true,\n                    errorText: \"Deze groep heeft zijn joker al eens ingezet.\"\n                })\n                return\n            } else {\n                this.dispatch(addScore(this.round.number, group, points, joker))\n            }\n        }\n        \n        const nextGroup = group + 1\n        this.setState({\n            group: nextGroup.toString(),\n            points: \"\",\n            showError: false,\n            errorText: \"\"\n        })\n        this.pointsInput.focus();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form className=\"p-4\" onSubmit={this.handleSubmit}>\n                    <Form.Row>\n                        <Col className=\"col-md-2\">\n                            <Form.Control name=\"group\" placeholder=\"Tafelnummer\" ref={(input) => {this.groupInput = input; }} value={this.state.group} onChange={this.handleInputChange} />\n                        </Col>\n                        <Col>\n                            <Form.Control name=\"points\" placeholder=\"Aantal punten\" ref={(input) => {this.pointsInput = input; }} value={this.state.points} onChange={this.handleInputChange} />\n                        </Col>\n                        <Button type=\"submit\">Punt toevoegen</Button>\n                    </Form.Row>\n                </Form>\n                <Modal show={this.state.showError} animation={false}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Fout bij ingeven van score</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{this.state.errorText}</Modal.Body>\n                    <Modal.Footer>\n                        <Button varian=\"secondary\" onClick={this.handleClose}>Sluiten</Button>\n                    </Modal.Footer>\n                </Modal>\n            </React.Fragment>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    groupNumbers: getGroupNumbers(state),\n    groupsThatUsedJoker: getGroupsThatUsedJoker(state)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      dispatch: dispatch\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddScore)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Score = ({group, groupName, points, joker}) => (\n    <tr>\n        <td>{group}</td>\n        <td>{groupName}</td>\n        <td>{points}</td>\n        <td>{joker? \"Ja\" : \"Nee\"}</td>\n    </tr>\n)\n\nScore.propTypes = {\n   group: PropTypes.number.isRequired,\n   points: PropTypes.number.isRequired\n}\n\nexport default Score\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Score from './Score'\nimport Table from 'react-bootstrap/Table'\n\nconst RoundScoreList = ({scores}) => (\n    <Table striped bordered hover>\n        <thead>\n            <tr>\n                <th>Tafel</th>\n                <th>Groepsnaam</th>\n                <th>Score</th>\n                <th>Joker ingezet</th>\n            </tr>\n        </thead>\n        <tbody>\n            {scores.map((score, index) => (\n                <Score key={index} group={score.group} groupName={score.groupName} points={score.points} joker={score.joker} />\n            ))}\n        </tbody>\n    </Table>\n)\n\nRoundScoreList.propTypes = {\n   scores: PropTypes.arrayOf(\n        PropTypes.shape({\n            round: PropTypes.number.isRequired,\n            group: PropTypes.number.isRequired,\n            points: PropTypes.number.isRequired\n        }).isRequired\n   ).isRequired\n}\n\nexport default RoundScoreList\n","import { connect } from 'react-redux'\nimport RoundScoreList from '../components/RoundScoreList'\nimport { makeGetSortedRoundScores } from '../selectors'\n\nconst makeMapStateToProps = () => {\n  const getSortedRoundScores = makeGetSortedRoundScores()\n  const mapStateToProps = (state, props) => {\n    return {\n      scores: getSortedRoundScores(state, props)\n    }\n  }\n\n  return mapStateToProps\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  }\n}\n\nconst RoundScoreListContainer = connect(\n  makeMapStateToProps,\n  mapDispatchToProps\n)(RoundScoreList)\n\nexport default RoundScoreListContainer\n","import React from 'react'\nimport AddScore from '../containers/AddScore'\nimport RoundScoreList from '../containers/RoundScoreList'\n\nconst RoundScorePage = ({ match: {params}, round }) => {\n    return (\n    <React.Fragment>\n        <h3>{round.name}</h3>\n        <AddScore round={round} />\n        <RoundScoreList round={round.number} /> \n    </React.Fragment>\n    )\n}\n\nexport default RoundScorePage\n","import { connect } from 'react-redux'\nimport RoundScorePage from '../components/RoundScorePage'\nimport { makeGetRound } from '../selectors'\n\nconst makeMapStateToProps = () => {\n  const getRound = makeGetRound()\n  const mapStateToProps = (state, props) => {\n    return {\n      round: getRound(state, props)\n    }\n  }\n\n  return mapStateToProps\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  }\n}\n\nconst RoundScorePageContainer = connect(\n  makeMapStateToProps,\n  mapDispatchToProps\n)(RoundScorePage)\n\nexport default RoundScorePageContainer\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst FinalScore = ({ranking, blank, finalScore}) => (\n    <tr className=\"finalscore-row\">\n        <td>{!blank && ranking}</td>\n        <td>{!blank && finalScore.groupName}</td>\n        {finalScore.roundScores.map((roundScore, index) => (\n            <td key={index}>{!blank && (roundScore.joker? roundScore.points * 2 + \"*\" : roundScore.points)}</td>\n        ))}\n        <td>{!blank && finalScore.totalScore}</td>\n    </tr>\n)\n\nFinalScore.propTypes = {\n   ranking: PropTypes.number.isRequired,\n   finalScore: PropTypes.object.isRequired\n}\n\nexport default FinalScore\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport FinalScore from './FinalScore'\nimport Table from 'react-bootstrap/Table'\n\nclass FullScoreList extends React.Component {\n    constructor(props) {\n        super(props)\n\n        const { finalScores } = props\n\n        this.numPages = Math.ceil(finalScores.scores.length / 10)\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n\n        this.state = {\n            allScores: finalScores,\n            page: -1,\n            lastPageStep: -1,\n            scoresToShow: []\n        }\n    }\n\n    componentDidMount() {\n        this.showPage(this.numPages - 1, -1)\n        window.addEventListener(\"keydown\", this.handleKeyDown)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keydown\", this.handleKeyDown)\n    }\n\n    showPage(pageNumber, lastPageStep) {\n        this.setState((prevState, props) => {\n            const start = pageNumber * 10\n            const end = (pageNumber + 1) * 10\n            return {\n                allScores: prevState.allScores,\n                page: pageNumber,\n                lastPageStep: lastPageStep,\n                scoresToShow: prevState.allScores.scores.slice(start, end)\n            }\n        })\n    }\n\n    handleKeyDown(e) {\n        if (e.keyCode === 38 && this.state.page > -1) {\n            if (this.state.page === 0 && this.state.lastPageStep > 0) {\n                this.showPage(0, this.state.lastPageStep - 1)\n            } else if (this.state.page === 1) {\n                this.showPage(0, 9)\n            } else {\n                this.showPage(this.state.page - 1, -1)\n            }\n        } else if (e.keyCode === 40 && this.state.page < this.numPages - 1) {\n            if (this.state.page === 0 && this.state.lastPageStep < 9) {\n                this.showPage(0, this.state.lastPageStep + 1)\n            } else {\n                this.showPage(this.state.page + 1, -1)\n            }\n        }\n    }\n\n    render() {\n        if (this.state.page === -1) {\n            return (<React.Fragment></React.Fragment>)\n        }\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Ranking</th>\n                        <th>Groepsnaam</th>\n                        {this.state.allScores.rounds.map((round, index) => (\n                            <td>{round}</td>\n                        ))}\n                        <th>Totaal Score</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.scoresToShow.map((score, index) => (\n                        <FinalScore key={score.groupName} blank={this.state.page === 0 && index < this.state.lastPageStep} ranking={score.ranking} finalScore={score} />\n                    ))}\n                </tbody>\n            </Table>\n        )\n    }\n}\n\n\nFullScoreList.propTypes = {\n   scores: PropTypes.arrayOf(\n        PropTypes.shape({\n            round: PropTypes.number.isRequired,\n            group: PropTypes.number.isRequired,\n            points: PropTypes.number.isRequired\n        }).isRequired\n   ).isRequired\n}\n\nexport default FullScoreList\n","import React from 'react'\nimport FullScoreList from './FullScoreList'\n\nconst FullScorePage = ({ finalScores }) => {\n    return (\n        <FullScoreList finalScores={finalScores} /> \n    )\n}\n\nexport default FullScorePage\n","import { connect } from 'react-redux'\nimport FullScorePage from '../components/FullScorePage'\nimport { getFinalScores } from '../selectors'\n\nconst mapStateToProps = (state, props) => {\n    return {\n        finalScores: getFinalScores(state, props)\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  }\n}\n\nconst FullScorePageContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FullScorePage)\n\nexport default FullScorePageContainer\n","import React from 'react'\nimport FullScorePage from '../containers/FullScorePage'\n\nconst IntermediateScorePage = ({ match: {params} }) => {\n    return (\n    <React.Fragment>\n        <h3>Tussenstand</h3>\n        <FullScorePage includeJoker={false} /> \n    </React.Fragment>\n    )\n}\n\nexport default IntermediateScorePage\n","import React from 'react'\nimport FullScorePage from '../containers/FullScorePage'\n\nconst FinalScorePage = ({ match: {params} }) => {\n    return (\n    <React.Fragment>\n        <h3>Eindstand</h3>\n        <FullScorePage includeJoker={true} /> \n    </React.Fragment>\n    )\n}\n\nexport default FinalScorePage\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport Container from \"react-bootstrap/Container\"\nimport NavBar from './components/NavBar';\nimport GroupPage from './components/GroupPage'\nimport RoundsPage from './components/RoundsPage'\nimport RoundScorePage from './containers/RoundScorePage'\nimport IntermediateScorePage from './components/IntermediateScorePage'\nimport FinalScorePage from './components/FinalScorePage'\n\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n      <Container className=\"App\">\n        <NavBar />\n        <Container className=\"main-content\">\n          <Switch>\n            <Route path=\"/groups\">\n              <GroupPage />\n            </Route>\n            <Route path=\"/rounds\">\n              <RoundsPage />\n            </Route>\n            <Route path=\"/roundscore/:round\" component={RoundScorePage} />\n            <Route path=\"/intermediatescore\" component={IntermediateScorePage} />\n            <Route path=\"/finalscore\" component={FinalScorePage} />\n          </Switch>\n        </Container>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","export const addOrUpdateName = (state, number, name) => {\n  var existingItemFound = false\n  var newState = state.map((item, index) => {\n    if (number !== item.number) {\n      // Not the one we want to update, return as-id\n      return item\n    }\n    \n    existingItemFound = true\n    return {\n      number: number,\n      name: name\n    }\n  })\n\n  if (!existingItemFound) {\n    newState.push({\n      number: number,\n      name: name\n    })\n  }\n\n  return newState\n}\n\nexport const addOrUpdateNameRounds = (state, number, name, maxPoints, jokerAllowed) => {\n  var existingItemFound = false\n  var newState = state.map((item, index) => {\n    if (number !== item.number) {\n      // Not the one we want to update, return as-id\n      return item\n    }\n    \n    existingItemFound = true\n    return {\n      number: number,\n      name: name,\n      maxPoints: maxPoints,\n      jokerAllowed: jokerAllowed\n    }\n  })\n\n  if (!existingItemFound) {\n    newState.push({\n      number: number,\n      name: name,\n      maxPoints: maxPoints,\n      jokerAllowed: jokerAllowed\n    })\n  }\n\n  return newState\n}\n\nexport const addOrUpdateScore = (state, round, group, points, joker) => {\n  var existingItemFound = false\n  var newState = state.map((item, index) => {\n    if (round !== item.round || group !== item.group) {\n      // Not the one we want to update, return as-id\n      return item\n    }\n    \n    existingItemFound = true\n    return {\n      round: round,\n      group: group,\n      points: points,\n      joker: joker\n    }\n  })\n  if (!existingItemFound) {\n    newState.push({\n      round: round,\n      group: group,\n      points: points,\n      joker: joker\n    })\n  }\n\n  return newState\n}","import { addOrUpdateName } from './stateUpdates'\n\nconst groups = (state = [], action) => {\n    switch (action.type) {\n      case 'ADD_GROUP':\n        return addOrUpdateName(state, action.number, action.name)\n      default:\n        return state\n    }\n  }\n  \n  export default groups\n  ","import { addOrUpdateNameRounds } from './stateUpdates'\n\nconst rounds = (state = [], action) => {\n    switch (action.type) {\n      case 'ADD_ROUND':\n        return addOrUpdateNameRounds(state, action.number, action.name, action.maxPoints, action.jokerAllowed)\n      default:\n        return state\n    }\n  }\n  \n  export default rounds\n  ","import { addOrUpdateScore } from './stateUpdates'\n\nconst scores = (state = [], action) => {\n    switch (action.type) {\n      case 'ADD_SCORE':\n        return addOrUpdateScore(state, action.round, action.group, action.points, action.joker)\n      default:\n        return state\n    }\n  }\n  \n  export default scores\n  \n","import { combineReducers } from 'redux'\nimport groups from './groups'\nimport rounds from './rounds'\nimport scores from './scores'\n\nexport default combineReducers({\n  groups,\n  rounds,\n  scores\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const loadState = () => {\n    try {\n      const serializedState = localStorage.getItem('state');\n      if (serializedState === null) {\n        return undefined;\n      }\n      return JSON.parse(serializedState);\n    } catch (err) {\n      return undefined;\n    }\n  }; \n\n  export const saveState = (state) => {\n    try {\n      const serializedState = JSON.stringify(state);\n      localStorage.setItem('state', serializedState);\n    } catch {\n      // ignore write errors\n    }\n  };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport scoreboardApp from './reducers'\nimport { createStore } from 'redux'\nimport * as serviceWorker from './serviceWorker';\nimport { loadState, saveState } from './localStorage';\n\nconst persistedState = loadState();\nconst store = createStore(scoreboardApp, persistedState)\n\nstore.subscribe(() => {\n    saveState(store.getState())\n})\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}